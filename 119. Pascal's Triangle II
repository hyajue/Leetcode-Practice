/**
* Given an index k, return the kth row of the Pascal's triangle.
* 
* For example, given k = 3,
* Return [1,3,3,1].
* 
* Note:
* Could you optimize your algorithm to use only O(k) extra space?
*/

/*
复杂度
时间:O(n^2) 空间：O(1)
思路：
对于每一行我们知道如果从前往后扫，第i个元素的值等于上一行的res[i]+res[i+1]，可以看到数据是往前看的，
所以在每次循环开始，先推入一个1 作为list的新开头。再继续计算。
这个技巧在动态规划省空间时也经常使用，主要就是看我们需要的数据是原来的数据还是新的数据来决定我们遍历的方向 
时间复杂度还是O(n^2)，而空间这里是O(k)来存储结果，仍然不需要额外空间
*/

public class PascalTriangleII {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> row =  new ArrayList<Integer>();
        if(rowIndex < 0) return row;
        
        for(int i=0; i<=rowIndex; i++){ // (1) 1 3 3 1
            row.add(0, 1);
            for(int j=1; j<row.size()-1; j++){
                row.set(j, row.get(j)+row.get(j+1));
            }
        }
        return row;
    }
}
