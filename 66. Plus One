/**
* Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.
* 
* You may assume the integer do not contain any leading zero, except the number 0 itself.
* 
* The digits are stored such that the most significant digit is at the head of the list.
*/

/*
复杂度
时间:O(n) 空间O()
思路：现行扫描
maintain a carry. 
if there's carry at highest bit, then get a new array and make the hightest bit 1.
One pass scan -> T(n) = O(n).   
*/

public class PlusOne {
    public int[] plusOne(int[] digits) {
        if(digits==null || digits.length==0)  //sanity check
            return digits;
        for(int i=digits.length-1; i>=0; i--){
            if(digits[i] != 9){ //no carry. return array.
                digits[i]++;
                return digits;
            }else{ //carry = 1, continue;
                digits[i] = 0;
            }
        }
        
        digits = new int[digits.length+1]; //define a new array.
        digits[0] = 1; //highest bit = 1.
        
        return digits;
    }
}
